name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  build-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install

      - name: Run unit tests
        run: npm test

  scan-image:
    needs: build-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image (local only)
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/ecommerce-app:latest

      - name: Scan Docker image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ secrets.DOCKERHUB_USERNAME }}/ecommerce-app:latest
          scan-type: 'image'
          format: 'table'
          exit-code: '0' # donâ€™t fail the build yet
          vuln-type: 'os,library'

  push-image:
    needs: scan-image
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push image to Docker Hub
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/ecommerce-app:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/ecommerce-app:sha-${{ github.sha }}

  deploy:
    needs: push-image
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install SSH key
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy latest image to EC2
        env:
          EC2_USER: ${{ secrets.EC2_USER }}
          EC2_INSTANCE_IP: ${{ secrets.EC2_INSTANCE_IP }}
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
        run: |
          IMAGE="${DOCKERHUB_USERNAME}/ecommerce-app:latest"
          ssh -o StrictHostKeyChecking=no "$EC2_USER@$EC2_INSTANCE_IP" << EOF
          echo "--- Logging in to Docker Hub ---"
          sudo docker login -u "$DOCKERHUB_USERNAME" -p "$DOCKERHUB_TOKEN"

          echo "--- Pulling latest image ---"
          sudo docker pull $IMAGE

          echo "--- Stopping old container ---"
          sudo docker stop ecommerce-app || true
          sudo docker rm ecommerce-app || true

          echo "--- Starting new container ---"
          sudo docker run -d --name ecommerce-app -p 80:3000 $IMAGE

          echo "--- Checking running containers ---"
          sudo docker ps --filter "name=ecommerce-app"

          echo "--- Verifying app with curl ---"
          curl -s http://localhost:3000 || true
          EOF
